{"version":3,"sources":["Components/Header/appName.js","Components/Header/headerBox.js","Components/JS_Uploadspreadsheet.js","Components/Aliments/AlimentCard.js","Components/Aliments/SummariesAliment.js","Components/Aliments/Pagination.js","Components/GroupeAlimentaire/groupe_alimentaire_select.js","Pages/Home/home.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","myAppbarColor","background","border","borderRadius","boxShadow","color","height","boxParentSize","width","JsUploadSpreadsheet","stateMutator","spreadSheetCompoMutator","setLoadingMutator","setFileName","setAlimentOptions","useEffect","selectFile","window","location","href","encodeURIComponent","file_path","a","fetch","responseType","response","blob","data","f","File","type","headers","get","reader","FileReader","onload","event","target","result","readedData","XLSX","readSheet2","name","readAsBinaryString","wsname","SheetNames","ws","Sheets","dataParse","sheet_to_json","header","sheet2Info","structureCompoSheet","groupe_aliments","map","item","index","hasOwnProperty","push","Object","keys","sort","console","log","jsonSpreadsheetCompo","forEach","value","aliments_data_nutrient_ref","alim_nom_fr","alim_grp_nom_fr","alim_ssgrp_nom_fr","les_nutrients","id","nutrient","toString","replace","nutrient_headers","parseFloat","getNutrientHeaders","row","slice","margin","input","display","AlimentCard","groupe_alimentaire","aliment_options","setSelectedAliments","selectedAliments","aliment_images","classes","useStyles","useState","imageLoaded","setImageLoaded","imgsrc","setImgSrc","txtPortion","setTxtPortion","aliment","setAliment","modifySelectedAliment","setAlimentImage","myAliment","groupe_alimentaire_value","substring","indexOf","length","portion","group_alim","some","groupeAlimentaireChangeEffect","groupeAlimentaire","group_alim_images","setGroupeAlimentaireImageAsync","imgUrl","Card","CardMedia","ReactImageAppear","src","animation","animationDuration","className","media","Skeleton","variant","CardContent","style","flexShrink","Typography","gutterBottom","component","charAt","toUpperCase","replaceAll","String","Array","fill","join","TextField","required","InputLabelProps","shrink","min","label","onChange","e","Number","Autocomplete","disabled","freeSolo","handleAlimentChange","options","getOptionLabel","option","renderInput","params","card","marginTop","backgroundSize","backgroundRepeat","backgroundPosition","objectFit","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","blue","table","SummariesAliment","nutrientCompo","nutrientSums","setNutrientSums","myTempArray","header_index","sum","reduce","prev","curItem","nutVal","findIndex","element","nutrient_name","nutrient_sum","PrettoSlider","withStyles","palette","primary","main","thumb","active","valueLabel","left","track","rail","Slider","styleList","icon","textColor","progressClassNames","nutrientConstraints","mid","high","myStyleIndex","progressBarColorIndex","nutrientPercent","toFixed","key","marginBottom","paddingTop","valueLabelFormat","x","aria-label","valueLabelDisplay","step","Chip","nutrientText","onDelete","deleteIcon","Icon","justifyContent","flexWrap","listStyle","padding","fontSize","chipColor","borderColor","formControl","minWidth","selectEmpty","GroupeAlimentaireSelect","groupe_alimentaires","setSelectedGroupAlimentaires","selectedGroupAlimentaires","setCurrentlySelectedGroupAlimentaire","currentlySelectedGroupAlimentaire","handleGroupAlimentaireSelect","selectedAlimentaire","numberOfOccurences","filter","groupe_alim","selectedAlimentaireValue","handleChosenGroupAlimentaire","chosenAlimentaire","Menu","attached","Button","Group","Dropdown","text","labeled","button","Header","content","Item","onClick","description","Label","circular","g_alim","Or","empty","includes","position","animated","Content","hidden","visible","Home","uploaded","setUploadState","spreadsheetCompo","setSpreadsheetCompo","loading","setLoading","LinearProgress","summary_root","flex","food_card","myCardRow","flexDirection","myCardColumn","Main","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.181610fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nexport default function AppName({file_name}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {file_name}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n        );\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      textAlign: 'left'\r\n    },\r\n    myAppbarColor: {\r\n      background: 'linear-gradient(45deg, #DA22FF 30%, #9733EE 90%)'\r\n    }\r\n  }));","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppName from './appName';\r\n\r\nexport default function HeaderBox({file_name}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box component=\"span\" className={classes.boxParentSize} >\r\n            <AppName file_name={\"Meal Calculateur\"} />\r\n        </Box>\r\n        );\r\n  }\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      //background: 'linear-gradient(45deg, #DA22FF 30%, #9733EE 90%)',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n      color: 'white',\r\n      height: 100,\r\n      \r\n    },\r\n    boxParentSize:{\r\n        height: 100,\r\n        width: \"80%\",\r\n        background: 'linear-gradient(45deg, #DA22FF 30%, #9733EE 90%)'\r\n        //padding: '0 30px',\r\n    }\r\n  });","import React, { useEffect } from 'react';\r\nimport '../App.css';\r\nimport '../Nutrition.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nexport default function JsUploadSpreadsheet(\r\n                                      {stateMutator, \r\n                                      spreadSheetCompoMutator, \r\n                                      setLoadingMutator, \r\n                                      setFileName,\r\n                                      setAlimentOptions}){\r\n\r\n    useEffect(() => {\r\n      setLoadingMutator(true);\r\n      selectFile(window.location.href+'/' +encodeURIComponent(\"PHASE_2_Finale_revised.xlsx\"));\r\n\r\n    },[]);\r\n\r\n    const selectFile = async (file_path) => {\r\n        \r\n        const response = await fetch(file_path, {responseType: 'blob'});\r\n        const data = await response.blob();\r\n\r\n        let f = new File([data], \"PHASE_2_Finale_revised.xlsx\", {\r\n          type: response.headers.get('content-type')\r\n        });\r\n\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = async function (event) {\r\n            var data = event.target.result;\r\n            let readedData = XLSX.read(data, {type: 'binary'});\r\n            \r\n            await readSheet2(readedData);\r\n\r\n            await setLoadingMutator(false);\r\n            await stateMutator(true);\r\n        };\r\n\r\n        setFileName(f.name);\r\n        await reader.readAsBinaryString(f);\r\n\r\n    };\r\n\r\n    const readSheet2 = (readedData) => {\r\n      const wsname = readedData.SheetNames[1];\r\n      const ws = readedData.Sheets[wsname];\r\n          \r\n      /* Convert array to json*/\r\n      const dataParse = XLSX.utils.sheet_to_json(ws, {header:1});\r\n\r\n      const sheet2Info = structureCompoSheet(dataParse);\r\n      spreadSheetCompoMutator(sheet2Info);\r\n\r\n      let groupe_aliments = {};\r\n\r\n      dataParse.map((item, index) => {\r\n          if (index == 0) return;\r\n            if (groupe_aliments.hasOwnProperty(item[0])){\r\n              groupe_aliments[item[0]].push(item[2])\r\n            }else{\r\n              groupe_aliments[item[0]] = [];\r\n              groupe_aliments[item[0]].push(item[2])\r\n            }\r\n        });\r\n        Object.keys(groupe_aliments).map((item) => {\r\n            groupe_aliments[item].sort();\r\n        });\r\n        console.log(groupe_aliments)\r\n        setAlimentOptions(groupe_aliments);\r\n        \r\n    }\r\n\r\n    const structureCompoSheet = (jsonSpreadsheetCompo) => {\r\n\r\n      let sheet2Info = {};\r\n      sheet2Info.aliments_data_nutrient_ref = [];\r\n      sheet2Info.nutrient_headers = [];\r\n\r\n      jsonSpreadsheetCompo.forEach((value, index) => {\r\n          if (index === 0) {\r\n            sheet2Info.nutrient_headers = getNutrientHeaders(value);\r\n            return;\r\n          }\r\n\r\n          sheet2Info.aliments_data_nutrient_ref.push({\r\n            [value[2]] : {\r\n              alim_nom_fr: value[2],\r\n              alim_grp_nom_fr: value[0],\r\n              alim_ssgrp_nom_fr: value[1],\r\n              les_nutrients: [\r\n                {\r\n                  id: ++index,\r\n                  nutrient: \"Energie, Règlement UE N° 1169/2011 (kcal/100g)\",\r\n                  value: value[3].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[1],\r\n                  value: value[4].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[2],\r\n                  value: value[5].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[3],\r\n                  value: value[6].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[4],\r\n                  value: value[7].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[5],\r\n                  value: value[8].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[6],\r\n                  value: value[9].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[7],\r\n                  value: value[10].toString().replace(',', '.')\r\n                },\r\n                {\r\n                  id: ++index,\r\n                  nutrient: sheet2Info.nutrient_headers[1] +\" \"+ sheet2Info.nutrient_headers[3],\r\n                  value: parseFloat(value[4].toString().replace(',', '.')) \r\n                        + parseFloat(value[6].toString().replace(',', '.'))\r\n                },\r\n              ]\r\n            }\r\n          })\r\n      });\r\n\r\n      return sheet2Info;\r\n\r\n    }\r\n\r\n    const getNutrientHeaders = (row) => {\r\n      row.push(\"Eau + Alcool (g/100g)\");\r\n      row[3] = \"Energie (kcal/100g)\";\r\n      return row.slice(3);\r\n    }\r\n\r\nreturn (\r\n    <></>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n  })\r\n)","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport {\r\n    Card, \r\n    CardMedia, \r\n    CardContent, \r\n    Typography,\r\n    TextField,\r\n  } from '@material-ui/core/';\r\n  import Autocomplete from '@material-ui/lab/Autocomplete';\r\n  import Skeleton from '@material-ui/lab/Skeleton';\r\n  import ReactImageAppear from 'react-image-appear';\r\n  import group_alim_images from \"../../resources/alimentaire_images.json\"\r\n  \r\n\r\nexport default function AlimentCard(\r\n  {\r\n    groupe_alimentaire,\r\n    aliment_options,\r\n    setSelectedAliments,\r\n    selectedAliments,\r\n    aliment_images\r\n  }) {\r\n\r\n    const classes = useStyles();\r\n    const [imageLoaded, setImageLoaded] = useState(true);\r\n    const [imgsrc, setImgSrc] = useState(\"https://i.stack.imgur.com/y9DpT.jpg\");\r\n    const [txtPortion, setTxtPortion] = useState(0);\r\n    const [aliment, setAliment] = useState(\"\");\r\n    \r\n\r\n    const handleAlimentChange = (value) => {\r\n        \r\n        modifySelectedAliment(value);\r\n        \r\n        setImageLoaded(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (aliment !== \"\"){\r\n        modifySelectedAliment(aliment)\r\n        //setSelectedAliments({...selectedAliments, [groupe_alimentaire] : {aliment:aliment, portion: txtPortion, group_alim: groupe_alimentaire}});\r\n        if (imgsrc === aliment_images[aliment]) return;\r\n        \r\n        setAlimentImage(aliment);\r\n        \r\n      } \r\n    }, [aliment, txtPortion]);\r\n\r\n    const modifySelectedAliment = async (myAliment) => {\r\n      let groupe_alimentaire_value = groupe_alimentaire.substring(0, (groupe_alimentaire.indexOf(\"_\") === -1) ? groupe_alimentaire.length : groupe_alimentaire.indexOf(\"_\"))\r\n      setAliment(myAliment);\r\n      setSelectedAliments({...selectedAliments, [groupe_alimentaire]: {aliment: myAliment, portion: txtPortion, group_alim: groupe_alimentaire_value}});\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n      \r\n      //check if this groupe_alimentaire is new or already existing to show\r\n      if (Object.keys(selectedAliments).some(item => item === groupe_alimentaire)) {\r\n        \r\n        setImageLoaded(false);\r\n        setAliment(selectedAliments[groupe_alimentaire].aliment);\r\n        setTxtPortion(selectedAliments[groupe_alimentaire].portion);\r\n        return;\r\n      }\r\n\r\n      groupeAlimentaireChangeEffect(groupe_alimentaire);\r\n\r\n    }, [groupe_alimentaire]);\r\n\r\n    const groupeAlimentaireChangeEffect = async (groupeAlimentaire) => {\r\n      let groupe_alimentaire_value = groupeAlimentaire.substring(0, (groupeAlimentaire.indexOf(\"_\") === -1) ? groupeAlimentaire.length : groupeAlimentaire.indexOf(\"_\"))\r\n      \r\n      if (typeof group_alim_images[groupe_alimentaire_value] != \"undefined\"){\r\n        setGroupeAlimentaireImageAsync(group_alim_images[groupe_alimentaire_value])\r\n        setAliment(\"\");\r\n        setTxtPortion(0);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const setGroupeAlimentaireImageAsync = async (imgUrl) => {\r\n      await setImageLoaded(false);\r\n      await setImgSrc(imgUrl);\r\n      await setImageLoaded(true);\r\n    }\r\n\r\n    const setAlimentImage = (myAliment) => {\r\n      \r\n      if (myAliment != \"\"){\r\n        setImgSrc(aliment_images[myAliment]);\r\n        setImageLoaded(true);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Card >\r\n            \r\n            {imageLoaded ? (\r\n            <CardMedia\r\n              title={aliment}\r\n            >\r\n              <ReactImageAppear \r\n                  src={imgsrc}\r\n                  animation=\"zoomIn\"\r\n                  animationDuration=\"0.5s\"\r\n                  className={classes.media}\r\n              />\r\n              \r\n            </CardMedia>) \r\n            : \r\n            <Skeleton variant=\"rect\" width={\"100%\"}  />\r\n             \r\n            }\r\n            \r\n            <CardContent>\r\n                <div style={{flexShrink: 1}}>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\" color={\"primary\"} >\r\n                  {groupe_alimentaire &&\r\n                  groupe_alimentaire.charAt(0).toUpperCase() \r\n                  + groupe_alimentaire.replaceAll(\"_\",\" \").slice(1) \r\n                  + new String(Array(45 - groupe_alimentaire.length).fill(\"\\xa0\").join(\" \")).toString()  \r\n                  }\r\n                </Typography>\r\n                </div>\r\n\r\n                <Typography variant=\"subtitle1\" color=\"primary\" component=\"p\">\r\n                {\r\n                ((aliment !== \"\") && (aliment != null)) ? aliment:\"Aucun Aliment sélectionné\"\r\n                //+ new String(Array(Math.max(0, (60 - aliment.length))).fill(\"\\xa0\").join(\" \")).toString() \r\n                }\r\n                </Typography>\r\n            </CardContent>\r\n            <CardContent>\r\n                <TextField\r\n                  required\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  type=\"number\"\r\n                  min={0}\r\n                  id={aliment}\r\n                  label=\"PORTION\"\r\n                  variant=\"filled\"\r\n                  value={txtPortion}\r\n                  onChange={(e) => {\r\n                    if (e.target.value !== \"\"){\r\n                      setTxtPortion(Number.parseFloat(e.target.value));\r\n                      if (Number.parseFloat(e.target.value) < 0){\r\n                        setTxtPortion(0);\r\n                      }  \r\n                    }else{\r\n                      setTxtPortion(e.target.value);\r\n                    }\r\n                  }}\r\n                />\r\n              \r\n              \r\n                <Autocomplete\r\n                  disabled={groupe_alimentaire === \"Aucun Aliment Sélectionné\"}\r\n                  freeSolo\r\n                  onChange={ (event, value) => handleAlimentChange(value) }\r\n                  options={aliment_options[groupe_alimentaire.substring(0, (groupe_alimentaire.indexOf(\"_\") === -1) ? groupe_alimentaire.length : groupe_alimentaire.indexOf(\"_\")) ] || []}\r\n                  getOptionLabel={(option) => option}\r\n                  renderInput={(params) => <TextField {...params} label=\"Choisir un Aliment\" margin=\"normal\" />}\r\n                  value={aliment}\r\n                />\r\n                </CardContent>\r\n              \r\n        </Card>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst useStyles = makeStyles((theme) =>({\r\n    card: {\r\n      //width: window.innerWidth - 30,\r\n      //margin: 1,\r\n      marginTop: 10,\r\n      // marginBottom: 50,\r\n      //background: \"linear-gradient(45deg, #56CCF2, #2F80ED)\"\r\n    },\r\n    media: {\r\n      display: 'block',\r\n      backgroundSize: 'cover',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundPosition: 'center',\r\n      width: '100%',\r\n      height: '250px',\r\n      objectFit: 'cover',\r\n      //paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: blue[500],\r\n    },\r\n    table: {\r\n      width : 250\r\n    }\r\n  }));","import React, {useEffect, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Chip, Icon, Typography, Slider, withStyles } from '@material-ui/core';\r\nimport RestaurantIcon from '@material-ui/icons/Restaurant';\r\n\r\n\r\n\r\n\r\nexport default function SummariesAliment({selectedAliments, nutrientCompo}){\r\n\r\n    const [nutrientSums, setNutrientSums] = useState([]);\r\n    let myTempArray = [];\r\n\r\n    useEffect(() => {\r\n        myTempArray = [];\r\n        console.log(selectedAliments);\r\n        nutrientCompo.nutrient_headers.map((item, header_index) => {\r\n\r\n            const sum = Object.keys(selectedAliments).reduce((prev, curItem, index) => {\r\n                \r\n                if (selectedAliments[curItem].aliment === null) return prev + 0;\r\n\r\n                const nutVal = nutrientCompo.aliments_data_nutrient_ref\r\n                                [\r\n                        nutrientCompo.aliments_data_nutrient_ref.findIndex((element) => selectedAliments[curItem].aliment === Object.keys(element)[0])\r\n                                 ][selectedAliments[curItem].aliment].les_nutrients[header_index].value\r\n\r\n                return prev + (selectedAliments[curItem].portion * nutVal);\r\n            }, 0);\r\n\r\n            myTempArray.push({\r\n                nutrient_name: item, nutrient_sum: sum\r\n            })\r\n        })\r\n\r\n        setNutrientSums(myTempArray);\r\n\r\n    }, [selectedAliments]);\r\n\r\n    const PrettoSlider = withStyles(theme => ({\r\n        root: {\r\n          height: 8,\r\n        },\r\n        disabled: {\r\n            color: theme.palette.primary.main\r\n        },\r\n        thumb: {\r\n          height: 24,\r\n          width: 24,\r\n          backgroundColor: '#fff',\r\n          border: '2px solid currentColor',\r\n          marginTop: -8,\r\n          marginLeft: -12,\r\n          '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n          },\r\n        },\r\n        active: {},\r\n        valueLabel: {\r\n          left: 'calc(-50% + 4px)',\r\n        },\r\n        track: {\r\n          height: 8,\r\n          borderRadius: 4,\r\n        },\r\n        rail: {\r\n          height: 8,\r\n          borderRadius: 4,\r\n        },\r\n      }))(Slider);\r\n    const classes = useStyles();\r\n    const EAU = \"Eau (g/100g)\";\r\n    const ALCOOL = \"Alcool (g/100g)\";\r\n    const GLUCIDES = \"Glucides (g/100g)\";\r\n\r\n    const styleList = [\r\n        {\r\n            icon: \"done\",\r\n            backgroundColor: \"#70AB1A\",\r\n            textColor: 'white'\r\n        }, {    \r\n            icon: \"error_outline\",\r\n            backgroundColor:\"#D8AD26\", \r\n            textColor: 'white'\r\n        },\r\n        {\r\n            icon:\"close\",\r\n            backgroundColor: \"#D14600\",\r\n            textColor: 'white'\r\n        },\r\n        {\r\n            icon: \"\",\r\n            backgroundColor: \"#ffffff\",\r\n            textColor: 'black'\r\n        }];\r\n\r\n    const progressClassNames = [{\r\n        color: '#72DC00',\r\n    },{\r\n        color: \"#D29D23\"\r\n    },{\r\n        color: \"#A93226\"\r\n    }]\r\n\r\n    const nutrientConstraints = [\r\n        {\r\n            mid: 2250,\r\n            high: 3000\r\n        },\r\n        {\r\n            mid: 0,\r\n            high: 0\r\n        },\r\n        {\r\n            mid: 69,\r\n            high: 92\r\n        },\r\n        {\r\n            mid: 0,\r\n            high: 0\r\n        },\r\n        {\r\n            mid: 600,\r\n            high: 800\r\n        },\r\n        {\r\n            mid: 1875,\r\n            high: 2500\r\n        },\r\n        {\r\n            mid: 1500,\r\n            high: 2000\r\n        },\r\n        {\r\n            mid: 0,\r\n            high: 0\r\n        },\r\n        {\r\n            mid: 0,\r\n            high: 1200\r\n        }\r\n\r\n    ]\r\n    \r\n    return ( \r\n        <div className={classes.root}>\r\n            { nutrientSums.map((item, index) => {\r\n                let myStyleIndex = 0, progressBarColorIndex = 0;\r\n                myStyleIndex = (item.nutrient_sum >= nutrientConstraints[index].high) ? 2 : \r\n                             (item.nutrient_sum > nutrientConstraints[index].mid) ? 1 : 0;\r\n\r\n                let nutrientPercent = ((item.nutrient_sum/nutrientConstraints[index].high) * 100).toFixed(0);\r\n                progressBarColorIndex = (nutrientPercent >= 75) ? 2 :\r\n                                 (nutrientPercent >= 50) ? 1 : 0;\r\n                \r\n                \r\n                return ( \r\n                <div key={index} style={{marginBottom: 20, width:\"95%\", paddingTop: 10}}>\r\n                    {(EAU != item.nutrient_name) && (ALCOOL != item.nutrient_name) && (GLUCIDES != item.nutrient_name)  ?\r\n                (\r\n                <div>\r\n                    <PrettoSlider \r\n                        valueLabelFormat={x => x+\"%\"}\r\n                        aria-label=\"pretto slider\" \r\n                        value={((item.nutrient_sum/nutrientConstraints[index].high) * 100).toFixed(0)} \r\n                        valueLabelDisplay=\"on\"\r\n                        step={1}\r\n                        style={{color:progressClassNames[progressBarColorIndex].color}}\r\n                        />\r\n                    <Typography gutterBottom>{item.nutrient_name}: <b>{item.nutrient_sum.toFixed(2)} </b></Typography>\r\n                </div>\r\n                ) :\r\n                (\r\n                    (item === \"Eau + Alcool (g/100g)\") &&\r\n                    <Chip \r\n                        key={index}\r\n                        style={{margin: \"0.5%\", backgroundColor: styleList[myStyleIndex].backgroundColor, color: styleList[myStyleIndex].textColor}}\r\n                        icon={<RestaurantIcon style={{color:styleList[myStyleIndex].textColor}} />} \r\n                        variant=\"outlined\"\r\n                        label={<Typography className={classes.nutrientText}>\r\n                            {item.nutrient_name}: <b>{item.nutrient_sum.toFixed(2)} </b></Typography>}\r\n                        onDelete={(e) => {}}\r\n                        deleteIcon={<Icon >{styleList[myStyleIndex].icon}</Icon>}\r\n                    />\r\n                    )}\r\n            </div>)\r\n             })\r\n             }\r\n        </div>\r\n    );\r\n} \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        margin: 5,\r\n    },\r\n    \r\n    title: {\r\n      fontSize: 24,\r\n      justifyContent: 'center'\r\n    },\r\n    nutrientText: {\r\n        fontSize: 12,\r\n    },\r\n    chipColor: {\r\n        borderColor: 'green'\r\n    }\r\n    \r\n  })\r\n  );\r\n\r\n/*  nutrientCompo.nutrient_headers.map((item, index) => {\r\n    let myStyleIndex = 0, progressBarColorIndex = 0;\r\n    if (!item) return;\r\n     const nutrientSum = Object.keys(aliment_portion).reduce((previousValue, currentValue) =>{\r\n         const nutrientValue = nutrientCompo.aliments_data_nutrient_ref\r\n             [\r\n                 nutrientCompo.aliments_data_nutrient_ref.findIndex\r\n                 (\r\n                 (element) => currentValue === Object.keys(element)[0]\r\n                 )\r\n             ][currentValue].les_nutrients[index].value\r\n         let prdt = aliment_portion[currentValue] * Number.parseFloat(nutrientValue);\r\n         \r\n         return previousValue + prdt;\r\n     }, 0);\r\n\r\n     myStyleIndex = (nutrientSum >= nutrientConstraints[index].high) ? 2 : \r\n                             (nutrientSum > nutrientConstraints[index].mid) ? 1 : 0;\r\n\r\n     if (nutrientConstraints[index].high === 0) myStyleIndex = 3;\r\n\r\n     let nutrientPercent = ((nutrientSum/nutrientConstraints[index].high) * 100).toFixed(0);\r\n     \r\n     progressBarColorIndex = (nutrientPercent >= 75) ? 2 :\r\n                                 (nutrientPercent >= 50) ? 1 : 0;\r\n\r\n     \r\n     return (\r\n         <div key={index} style={{marginBottom: 20, width:\"95%\", paddingTop: 10}}>\r\n         {(EAU != item) && (ALCOOL != item) && (GLUCIDES != item)  ?\r\n     (\r\n     <div>\r\n         <PrettoSlider \r\n             valueLabelFormat={x => x+\"%\"}\r\n             aria-label=\"pretto slider\" \r\n             value={nutrientPercent} \r\n             valueLabelDisplay=\"on\"\r\n             step={1}\r\n             style={{color:progressClassNames[progressBarColorIndex].color}}\r\n             />\r\n         <Typography gutterBottom>{item}: <b>{nutrientSum.toFixed(2)} </b></Typography>\r\n     </div>\r\n     ) :\r\n     (\r\n         (item === \"Eau + Alcool (g/100g)\") &&\r\n         <Chip \r\n             key={index}\r\n             style={{margin: \"0.5%\", backgroundColor: styleList[myStyleIndex].backgroundColor, color: styleList[myStyleIndex].textColor}}\r\n             icon={<RestaurantIcon style={{color:styleList[myStyleIndex].textColor}} />} \r\n             variant=\"outlined\"\r\n             label={<Typography className={classes.nutrientText}>\r\n                 {item}: <b>{nutrientSum.toFixed(2)} </b></Typography>}\r\n             onDelete={(e) => {}}\r\n             deleteIcon={<Icon >{styleList[myStyleIndex].icon}</Icon>}\r\n         />\r\n         )}\r\n </div>)\r\n})\r\n*/","import React from 'react';\r\nimport {\r\n    FormControl,InputLabel, MenuItem,\r\n    makeStyles, Select\r\n  } from '@material-ui/core/';\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nexport default function  Pagination({pages, activePage, onClick, groupe_alimentaires}){\r\n    \r\n  const classes = useStyles();\r\n\r\n    return (\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n      <InputLabel id=\"demo-simple-select-filled-label\">Groupe Alimentaire</InputLabel>\r\n      <Select\r\n        labelId=\"demo-simple-select-filled-label\"\r\n        id=\"demo-simple-select-filled\"\r\n        value={activePage}\r\n        onChange={(e) => onClick(e.target.value)}\r\n      >\r\n          <MenuItem value={0}>\r\n            {(groupe_alimentaires[0] != null) ? groupe_alimentaires[0] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={10}>\r\n            {(groupe_alimentaires[10] != null) ? groupe_alimentaires[10] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={2}>\r\n            {(groupe_alimentaires[2] != null) ? groupe_alimentaires[2] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={3}>\r\n            {(groupe_alimentaires[3] != null) ? groupe_alimentaires[3] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={4}>\r\n            {(groupe_alimentaires[4] != null) ? groupe_alimentaires[4] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={5}>\r\n            {(groupe_alimentaires[5] != null) ? groupe_alimentaires[5] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={6}>\r\n            {(groupe_alimentaires[6] != null) ? groupe_alimentaires[6] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={7}>\r\n            {(groupe_alimentaires[7] != null) ? groupe_alimentaires[7] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={8}>\r\n            {(groupe_alimentaires[8] != null) ? groupe_alimentaires[8] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={9}>\r\n            {(groupe_alimentaires[9] != null) ? groupe_alimentaires[9] : \"\"}\r\n          </MenuItem>\r\n          <MenuItem value={1}>\r\n            {(groupe_alimentaires[1] != null) ? groupe_alimentaires[1] : \"\"}\r\n          </MenuItem>\r\n          \r\n      </Select>\r\n    </FormControl>\r\n\r\n\r\n        // <List component=\"nav\" aria-label=\"main mailbox folders\" aria-labelledby=\"nested-list-subheader\" subheader={\r\n        //     <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n        //       Groupe Alimentaire\r\n        //     </ListSubheader>\r\n        //   }>\r\n        // {\r\n        //    pages.map(page => \r\n        //    (\r\n        //        <ListItem\r\n        //             button\r\n        //             selected={activePage === page}\r\n        //             onClick={() => onClick(page)}\r\n        //         >\r\n        //             <ListItemText style={{color:'black'}} primary={(spreadsheetData[page] != null) ? spreadsheetData[page].groupe_alimentaire : \"\"} />\r\n                    \r\n        //         </ListItem>\r\n            \r\n        //    ))  \r\n        // }\r\n        // </List>\r\n    )\r\n\r\n}\r\n\r\n{/* <Typography key={key} color={\"primary\"} component={\"p\"}>{ (spreadsheetData[key] != null) ? spreadsheetData[key].groupe_alimentaire : \"\" }</Typography> */}","import React from 'react';\r\nimport { Dropdown, Icon, Menu , Button, Label} from 'semantic-ui-react';\r\n\r\nexport default function GroupeAlimentaireSelect({\r\n                            groupe_alimentaires,\r\n                            selectedAliments, \r\n                            setSelectedGroupAlimentaires,\r\n                            selectedGroupAlimentaires,\r\n                            setCurrentlySelectedGroupAlimentaire,\r\n                            currentlySelectedGroupAlimentaire  \r\n                        })\r\n{\r\n\r\n    const handleGroupAlimentaireSelect = (e, selectedAlimentaire) => {\r\n        let numberOfOccurences = selectedGroupAlimentaires.filter(groupe_alim => groupe_alim.substring(0, (groupe_alim.indexOf(\"_\") === -1) ? groupe_alim.length : groupe_alim.indexOf(\"_\")) === selectedAlimentaire.value).length;\r\n        //if this is more than zero, then it means there may be multiple groupe_alims\r\n        //continue from here\r\n\r\n        let selectedAlimentaireValue = (numberOfOccurences > 0) ? selectedAlimentaire.value+\"_\"+numberOfOccurences : selectedAlimentaire.value;\r\n        setSelectedGroupAlimentaires([...selectedGroupAlimentaires, selectedAlimentaireValue]);\r\n        \r\n    }\r\n\r\n    const handleChosenGroupAlimentaire = (e, chosenAlimentaire) => {\r\n        setCurrentlySelectedGroupAlimentaire(chosenAlimentaire.value);\r\n    }\r\n\r\n    const handleAlimentaireDelete = () => {\r\n        console.log(currentlySelectedGroupAlimentaire);\r\n        //delete from selectedGroupAlimentaires using splice\r\n        //setSelectedGroupAlimentaires(selectedGroupAlimentaires.filter(item => item !== currentlySelectedGroupAlimentaire));\r\n        \r\n        //remove from selectedAliment if possible\r\n    }\r\n\r\n    return (\r\n        <Menu attached='top' >\r\n            <Button.Group color='teal'>\r\n                \r\n                <Dropdown\r\n                    text='Ajouter'\r\n                    icon='plus'\r\n                    labeled\r\n                    button\r\n                    className='icon'\r\n                >\r\n                    <Dropdown.Menu>\r\n\r\n                        <Dropdown.Header icon='tags' content='Ajouter Groupe Alimentaire' />\r\n                        {\r\n                            Object.keys(groupe_alimentaires).map(\r\n                                (item, index) => <Dropdown.Item\r\n                                                key={index} \r\n                                                onClick={handleGroupAlimentaireSelect}\r\n                                                value={item}\r\n                                                icon={\"food\"}\r\n                                                content={item}\r\n                                                description={<Label circular color={\"grey\"} >\r\n                                                {selectedGroupAlimentaires.filter( g_alim => g_alim.substring(0, (g_alim.indexOf(\"_\") === -1) ? g_alim.length : g_alim.indexOf(\"_\")) === item ).length}\r\n                                              </Label>}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Button.Or />\r\n                <Dropdown\r\n                    text='Choisir'\r\n                    icon='triangle down'\r\n                    labeled\r\n                    button\r\n                    className='icon'\r\n                >\r\n                    <Dropdown.Menu >\r\n\r\n                        <Dropdown.Header icon='tags' content='Choisir Groupe Alimentaire' />\r\n                        {\r\n                            selectedGroupAlimentaires.map(\r\n                                (item, index) => <Dropdown.Item \r\n                                            key={index}\r\n                                            value={item}\r\n                                            content={item}\r\n                                            onClick={handleChosenGroupAlimentaire}\r\n                                            description={\r\n                                                <Label circular empty color={Object.keys(selectedAliments).includes(item)?\"green\":\"grey\"}  />\r\n                                                }\r\n                                            \r\n                                            />\r\n                            )\r\n                        }\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                \r\n            </Button.Group>\r\n\r\n            \r\n            <Menu.Menu position='right'>\r\n                <Button animated='vertical' color={\"red\"} disabled={currentlySelectedGroupAlimentaire===\"Aucun Groupe Alimentaire Sélectionné\"}>\r\n                    <Button.Content hidden onClick={handleAlimentaireDelete}>Delete</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name='trash alternate' />\r\n                    </Button.Content>\r\n                </Button>\r\n            </Menu.Menu>\r\n        </Menu>\r\n    )\r\n\r\n}","import React, {useEffect, useState} from 'react';\r\nimport '../../App.css';\r\nimport '../../Nutrition.css';\r\nimport HeaderBox from '../../Components/Header/headerBox';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport JsUploadSpreadsheet from '../../Components/JS_Uploadspreadsheet';\r\n  import { \r\n    Card,CardContent,Typography, LinearProgress\r\n  } from '@material-ui/core/';\r\nimport AlimentCard from '../../Components/Aliments/AlimentCard';\r\nimport SummariesAliment from '../../Components/Aliments/SummariesAliment';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport Pagination from '../../Components/Aliments/Pagination';\r\nimport aliment_images from '../../resources/aliment_images.json';\r\nimport GroupeAlimentaireSelect from \"../../Components/GroupeAlimentaire/groupe_alimentaire_select\";\r\n\r\n\r\n\r\nexport default function Home() {\r\nconst [uploaded, setUploadState] = useState(false);\r\nconst [file_name, setFileName] = useState(\"No File Uploaded\")\r\nconst [selectedAliments, setSelectedAliments] = useState({});\r\nconst [spreadsheetCompo, setSpreadsheetCompo] = useState({});\r\nconst [loading, setLoading] = useState(false);\r\nconst [aliment_options, setAlimentOptions] = useState([]);\r\nconst [selectedGroupAlimentaires, setSelectedGroupAlimentaires] = useState([]);\r\nconst [currentlySelectedGroupAlimentaire, setCurrentlySelectedGroupAlimentaire] = useState(\"Aucun Groupe Alimentaire Sélectionné\");\r\n\r\nconst classes = useStyles();\r\n\r\n  useEffect(() => {      \r\n\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div >\r\n        {\r\n        !uploaded &&\r\n        \r\n        <>\r\n          <JsUploadSpreadsheet \r\n              stateMutator={setUploadState} \r\n              spreadSheetCompoMutator={setSpreadsheetCompo} \r\n              setLoadingMutator={setLoading}\r\n              setFileName={setFileName}\r\n              setAlimentOptions={setAlimentOptions}\r\n          />\r\n        </>\r\n\r\n        }\r\n        \r\n        {\r\n          loading && \r\n          <LinearProgress style={{marginTop: 10}}/>\r\n        }\r\n\r\n        {\r\n          uploaded &&\r\n            <div className={classes.root}>\r\n              \r\n              <AlimentCard \r\n                  groupe_alimentaire={currentlySelectedGroupAlimentaire} \r\n                  aliment_options={aliment_options} \r\n                  setSelectedAliments={setSelectedAliments}\r\n                  selectedAliments={selectedAliments}\r\n                  aliment_images={aliment_images}\r\n              />\r\n              \r\n              <GroupeAlimentaireSelect \r\n                  groupe_alimentaires={aliment_options} \r\n                  selectedAliments={selectedAliments}\r\n                  setSelectedGroupAlimentaires={setSelectedGroupAlimentaires}\r\n                  selectedGroupAlimentaires={selectedGroupAlimentaires}\r\n                  setCurrentlySelectedGroupAlimentaire={setCurrentlySelectedGroupAlimentaire}\r\n                  currentlySelectedGroupAlimentaire={currentlySelectedGroupAlimentaire}\r\n              />\r\n\r\n              <Card className={classes.summary_root}>\r\n                <CardContent>\r\n                  <Typography className={classes.title} >\r\n                  Apports nutritionnels du jour\r\n                  </Typography>\r\n\r\n                  <SummariesAliment \r\n                      selectedAliments={selectedAliments}\r\n                      nutrientCompo={spreadsheetCompo}\r\n                  />\r\n\r\n                </CardContent>        \r\n              </Card>\r\n\r\n              \r\n            {/* <Box component=\"span\" m={1}>\r\n              \r\n            </Box> */}\r\n          </div>\r\n        }\r\n    \r\n    </div>\r\n  );\r\n  }\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      background: 'linear-gradient(45deg, rgba(255,255,255,0.9) 30%, #rgba(225,225,2,0.4) 90%)',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      boxShadow: '0 3px 5px 2px rgba(10, 10, 0, .1)',\r\n      color: 'white',\r\n      flex: 1\r\n    },\r\n    food_card:{\r\n      flexGrow: 1\r\n    },\r\n    summary_root: {\r\n      width: \"100%\",\r\n      flex: 1\r\n    },\r\n    myCardRow:{\r\n      flexDirection: 'row'\r\n    },\r\n    myCardColumn: {\r\n      flexDirection: 'column'\r\n    },\r\n    title: {\r\n      fontSize: 24,\r\n      justifyContent: 'center'\r\n    },\r\n  }\r\n);\r\n","import React from 'react';\r\n\r\nimport Home from './Pages/Home/home';\r\n\r\nfunction Main() {\r\n  return (\r\n    <Home />\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './App.css';\r\nimport Main from './Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}